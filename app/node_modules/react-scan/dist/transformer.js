var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/core/native/plugins/transformer.ts
var transformer_exports = {};
__export(transformer_exports, {
  default: () => transformer_default
});
module.exports = __toCommonJS(transformer_exports);
function transformer_default({ types: t }) {
  return {
    name: "modify-react-scan",
    visitor: {
      Program(path, state) {
        const { filename } = state;
        const isProduction = process.env.NODE_ENV === "production";
        if (!isProduction) {
          return;
        }
        if (filename) {
          if (filename.includes("node_modules/react-scan/dist/native.js")) {
            path.get("body").forEach((childPath) => {
              if (t.isImportDeclaration(childPath.node)) {
                childPath.remove();
              }
            });
            const reactScanDeclaration = t.variableDeclaration("const", [
              t.variableDeclarator(
                t.identifier("ReactScan"),
                t.arrowFunctionExpression(
                  [
                    t.objectPattern([
                      t.objectProperty(
                        t.identifier("children"),
                        t.identifier("children"),
                        false,
                        true
                      )
                    ])
                  ],
                  t.identifier("children")
                )
              )
            ]);
            const exportsAssignment = t.expressionStatement(
              t.assignmentExpression(
                "=",
                t.memberExpression(
                  t.identifier("exports"),
                  t.identifier("ReactScan")
                ),
                t.identifier("ReactScan")
              )
            );
            path.node.body = [];
            path.pushContainer("body", reactScanDeclaration);
            path.pushContainer("body", exportsAssignment);
          }
        }
      }
    }
  };
}
